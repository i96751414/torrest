// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-12-31 17:11:21.3931734 +0000 GMT m=+0.099994301

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "i96751414",
            "url": "https://github.com/i96751414/torrest",
            "email": "i96751414@gmail.com"
        },
        "license": {
            "name": "GPL3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/settings/get": {
            "get": {
                "description": "get settings in JSON object",
                "produces": [
                    "application/json"
                ],
                "summary": "Get current settings",
                "operationId": "get-settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    }
                }
            }
        },
        "/settings/set": {
            "post": {
                "description": "set settings given the provided JSON object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Set settings",
                "operationId": "set-settings",
                "parameters": [
                    {
                        "description": "Settings to be set",
                        "name": "default",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shutdown": {
            "get": {
                "description": "shutdown server",
                "summary": "Shutdown",
                "operationId": "shutdown",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "check server status",
                "produces": [
                    "application/json"
                ],
                "summary": "Status",
                "operationId": "status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StatusResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Houston, we have a problem!"
                }
            }
        },
        "api.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "settings.ProxySettings": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "settings.Settings": {
            "type": "object",
            "properties": {
                "connections_limit": {
                    "type": "integer",
                    "example": 0
                },
                "disable_dht": {
                    "type": "boolean",
                    "example": false
                },
                "disable_upnp": {
                    "type": "boolean",
                    "example": false
                },
                "download_path": {
                    "type": "string",
                    "example": "downloads"
                },
                "encryption_policy": {
                    "type": "integer",
                    "example": 0
                },
                "limit_after_buffering": {
                    "type": "boolean",
                    "example": false
                },
                "listen_interfaces": {
                    "type": "string"
                },
                "lower_listen_port": {
                    "type": "integer",
                    "example": 6889
                },
                "max_download_rate": {
                    "type": "integer",
                    "example": 0
                },
                "max_upload_rate": {
                    "type": "integer",
                    "example": 0
                },
                "outgoing_interfaces": {
                    "type": "string"
                },
                "proxy": {
                    "type": "object",
                    "$ref": "#/definitions/settings.ProxySettings"
                },
                "seed_time_limit": {
                    "type": "integer",
                    "example": 0
                },
                "seed_time_ratio_limit": {
                    "type": "integer",
                    "example": 0
                },
                "session_save": {
                    "type": "integer",
                    "example": 30
                },
                "share_ratio_limit": {
                    "type": "integer",
                    "example": 0
                },
                "torrents_path": {
                    "type": "string",
                    "example": "downloads/Torrents"
                },
                "tuned_storage": {
                    "type": "boolean",
                    "example": false
                },
                "upper_listen_port": {
                    "type": "integer",
                    "example": 7000
                },
                "user_agent": {
                    "type": "integer",
                    "example": 0
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Torrest API",
	Description: "Torrent server with a REST API.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
